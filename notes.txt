Projet: développement d'une plateforme d'e-commerce avec laravel/MySql

Contraintes stack:

back:
-> laravel
-> MySql

front:
-> Pas de framework (librairies autorisées)
-> Possibilité d'utilisé des API et service tiers

Autres contraintes:
-> Nomenclature du code en anglais
-> camelCase pour le nomage des éléments (PascalCase pour le nommage des classes uniquement)
-> commenter les méthodes et les propritétés
-> Utilisation controlleur de ressource laravel pour le CRUD
-> Utilisation systeme de validation laravel pour les formulaires
-> Utilisation ORM Eloquent pour la récupération des données
-> Utilisation github pour le versionning du code


Les données: (voir brief)


L'achitercture de l'application:

2 parties:
-> Cliente
-> administration


Partie cliente:

2 pages:
-> Liste des produits
-> Détail d'un produits


Fonctionnalités:

a) Liste des produits:
-> Lecture en pagination
-> filtrages (solde, homme, femme) (affichage total nb produit filtrés)
-> accès au détail d'un produit

b) Detail d'un produit:
-> Lecture simple
-> formulaire d'achat


Partie administration:

3 pages:
-> Authentification
-> Liste des produits/catégories
-> Création/modification d'un produit/catégorie


Fonctionnalités:

a) Authentification:
-> Formulaire de connexion

b) Liste des produits/categories
-> Lecture en pagination
-> navigation produit/categories
-> suppression d'un produit

c) Création/modification d'un produit/catégorie:
-> formulaire
-> upload d'image
-> sauvegarde des données


A rendre: Archive Zip
-> Code du projet (enlever les vendors)
-> diagramme table Sql
-> Fichier text addresse github


Oragnisation:

1) Migration et fixtures:
-> Création migration V
-> Création factory + seeder V

2) Affichage partie cliente (pas de partie achat) V

3) Affichage partie admin V

4) Intégration CRUD product partie admin (pas d'upload d'image) V

5) Refaire le CURD pour les catégories V

6) Intégration systeme de validation (formulaire product et category) V

7) Finalisation partie cliente:
-> Filtrage liste des produits categories V

8) Finalisation partie admin:
-> Upload image produit V

9) Intégration footer V

10) Elaboration diagramme données + notes de rendu

11) Intégration modal confirm suppresion

12) Correction bug formulaire (récupération veille donnée lors du reload)

13) Responsive

UML:

3 entités:
-> Product
-> Picture
-> Category
-> User


1) Category:
-> id: increments('id')->unsigned()
-> name: string('name', 100);

2) Product:
-> id: increments('id')->unsigned()
-> title: string(min 5 max 100)
-> Description: text()
-> prix: float()
-> taille: enum()
-> picture_id: unsignedInteger('picture_id')
-> isPublished: boolean()
-> isPromoted: boolean()
-> référence du produit: string(16)
-> category_id: unsignedInteger('category_id')


3) Picture:
-> id: increments('id')->unsigned()
-> book_id: unsignedInteger('product_id')
-> link: string('link', 100)


4) User:
id: $table->id();
name: $table->string('name');
email: $table->string('email')->unique();
mot de passe: $table->string('password');
$table->timestamp('email_verified_at')->nullable();
$table->timestamp('updated_at')->nullable();
$table->timestamp('created_at')->nullable();


Relation:

Product <-> Category:
-> Product - hasOne -> Category
-> Category - hasMany -> Product

Product <-> Picture:
-> Product - hasOne -> Picture
-> Picture - hasOne -> Product